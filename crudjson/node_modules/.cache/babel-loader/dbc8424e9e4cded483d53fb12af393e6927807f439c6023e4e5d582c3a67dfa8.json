{"ast":null,"code":"import PostService from '../service';\nexport const cancelForm = () => {\n  dispatch(showForm(false));\n  dispatch({\n    type: 'SET_EDIT_POST_ID',\n    payload: id\n  });\n  dispatch({\n    type: 'SET_SELECTED_POST_DETAILS',\n    payload: data\n  });\n};\nexport const setPosts = () => async dispatch => {\n  dispatch(loadingPosts(true));\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.listPosts();\n  dispatch({\n    type: 'SET_POSTS',\n    payload: data\n  });\n  dispatch(loadingPosts(false));\n};\nexport const loadingPosts = payload => {\n  return {\n    type: 'SET_LOADING_DATA',\n    payload: payload\n  };\n};\nexport const addPostLoading = payload => {\n  return {\n    type: 'SET_LOADING_ADD_POST',\n    payload: payload\n  };\n};\nexport const showForm = payload => {\n  return {\n    type: 'SET_FORM',\n    payload\n  };\n};\nexport const addPost = payload => async dispatch => {\n  dispatch(addPostLoading(true));\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.createPost(payload);\n  dispatch(addPostLoading(false));\n  dispatch(showForm(false));\n  dispatch(setPosts());\n};\nexport const getPost = id => async dispatch => {\n  dispatch({\n    type: 'SET_LOADING_EDIT_POST',\n    payload: true\n  });\n  dispatch({\n    type: 'SET_EDIT_POST_ID',\n    payload: id\n  });\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.getPost(id);\n  dispatch({\n    type: 'SET_SELECTED_POST_DETAILS',\n    payload: data\n  });\n  dispatch({\n    type: 'SET_LOADING_EDIT_POST',\n    payload: false\n  });\n\n  // dispatch(addPostLoading(false));\n  dispatch(showForm(true));\n  dispatch(setPosts());\n};","map":{"version":3,"names":["PostService","cancelForm","dispatch","showForm","type","payload","id","data","setPosts","loadingPosts","Promise","res","setTimeout","listPosts","addPostLoading","addPost","createPost","getPost"],"sources":["/home/abhilash/Workspace/Training/Redux/Crud_json/crudjson/src/actions/index.js"],"sourcesContent":["import PostService from '../service';\r\n\r\n\r\nexport const cancelForm=()=> {\r\n dispatch(showForm(false));\r\n dispatch({\r\n  type: 'SET_EDIT_POST_ID',\r\n  payload: id,\r\n});\r\ndispatch({\r\n  type: 'SET_SELECTED_POST_DETAILS',\r\n  payload: data,\r\n});\r\n};\r\n\r\nexport const setPosts = () => async (dispatch) => {\r\n  dispatch(loadingPosts(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.listPosts();\r\n  dispatch({\r\n    type: 'SET_POSTS',\r\n    payload: data,\r\n  });\r\n\r\n  dispatch(loadingPosts(false));\r\n};\r\n\r\nexport const loadingPosts = (payload) => {\r\n  return {\r\n    type: 'SET_LOADING_DATA',\r\n    payload: payload,\r\n  };\r\n};\r\nexport const addPostLoading = (payload) => {\r\n  return {\r\n    type: 'SET_LOADING_ADD_POST',\r\n    payload: payload,\r\n  };\r\n};\r\nexport const showForm = (payload) => {\r\n  return {\r\n    type: 'SET_FORM',\r\n    payload,\r\n  };\r\n};\r\nexport const addPost = (payload) => async (dispatch) => {\r\n  dispatch(addPostLoading(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.createPost(payload);\r\n\r\n  dispatch(addPostLoading(false));\r\n  dispatch(showForm(false));\r\n  dispatch(setPosts());\r\n};\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n  dispatch({\r\n    type: 'SET_LOADING_EDIT_POST',\r\n    payload: true,\r\n  });\r\n  dispatch({\r\n    type: 'SET_EDIT_POST_ID',\r\n    payload: id,\r\n  });\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.getPost(id);\r\n  dispatch({\r\n    type: 'SET_SELECTED_POST_DETAILS',\r\n    payload: data,\r\n  });\r\n  dispatch({\r\n    type: 'SET_LOADING_EDIT_POST',\r\n    payload: false,\r\n  });\r\n\r\n  // dispatch(addPostLoading(false));\r\n  dispatch(showForm(true));\r\n  dispatch(setPosts());\r\n};\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,YAAY;AAGpC,OAAO,MAAMC,UAAU,GAAC,MAAK;EAC5BC,QAAQ,CAACC,QAAQ,CAAC,KAAK,CAAC,CAAC;EACzBD,QAAQ,CAAC;IACRE,IAAI,EAAE,kBAAkB;IACxBC,OAAO,EAAEC;EACX,CAAC,CAAC;EACFJ,QAAQ,CAAC;IACPE,IAAI,EAAE,2BAA2B;IACjCC,OAAO,EAAEE;EACX,CAAC,CAAC;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAON,QAAQ,IAAK;EAChDA,QAAQ,CAACO,YAAY,CAAC,IAAI,CAAC,CAAC;EAC5B,MAAM,IAAIC,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC;EACjD,MAAM;IAAEJ;EAAK,CAAC,GAAG,MAAMP,WAAW,CAACa,SAAS,EAAE;EAC9CX,QAAQ,CAAC;IACPE,IAAI,EAAE,WAAW;IACjBC,OAAO,EAAEE;EACX,CAAC,CAAC;EAEFL,QAAQ,CAACO,YAAY,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMA,YAAY,GAAIJ,OAAO,IAAK;EACvC,OAAO;IACLD,IAAI,EAAE,kBAAkB;IACxBC,OAAO,EAAEA;EACX,CAAC;AACH,CAAC;AACD,OAAO,MAAMS,cAAc,GAAIT,OAAO,IAAK;EACzC,OAAO;IACLD,IAAI,EAAE,sBAAsB;IAC5BC,OAAO,EAAEA;EACX,CAAC;AACH,CAAC;AACD,OAAO,MAAMF,QAAQ,GAAIE,OAAO,IAAK;EACnC,OAAO;IACLD,IAAI,EAAE,UAAU;IAChBC;EACF,CAAC;AACH,CAAC;AACD,OAAO,MAAMU,OAAO,GAAIV,OAAO,IAAK,MAAOH,QAAQ,IAAK;EACtDA,QAAQ,CAACY,cAAc,CAAC,IAAI,CAAC,CAAC;EAC9B,MAAM,IAAIJ,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC;EACjD,MAAM;IAAEJ;EAAK,CAAC,GAAG,MAAMP,WAAW,CAACgB,UAAU,CAACX,OAAO,CAAC;EAEtDH,QAAQ,CAACY,cAAc,CAAC,KAAK,CAAC,CAAC;EAC/BZ,QAAQ,CAACC,QAAQ,CAAC,KAAK,CAAC,CAAC;EACzBD,QAAQ,CAACM,QAAQ,EAAE,CAAC;AACtB,CAAC;AAED,OAAO,MAAMS,OAAO,GAAIX,EAAE,IAAK,MAAOJ,QAAQ,IAAK;EACjDA,QAAQ,CAAC;IACPE,IAAI,EAAE,uBAAuB;IAC7BC,OAAO,EAAE;EACX,CAAC,CAAC;EACFH,QAAQ,CAAC;IACPE,IAAI,EAAE,kBAAkB;IACxBC,OAAO,EAAEC;EACX,CAAC,CAAC;EACF,MAAM,IAAII,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC;EACjD,MAAM;IAAEJ;EAAK,CAAC,GAAG,MAAMP,WAAW,CAACiB,OAAO,CAACX,EAAE,CAAC;EAC9CJ,QAAQ,CAAC;IACPE,IAAI,EAAE,2BAA2B;IACjCC,OAAO,EAAEE;EACX,CAAC,CAAC;EACFL,QAAQ,CAAC;IACPE,IAAI,EAAE,uBAAuB;IAC7BC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACAH,QAAQ,CAACC,QAAQ,CAAC,IAAI,CAAC,CAAC;EACxBD,QAAQ,CAACM,QAAQ,EAAE,CAAC;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}