{"ast":null,"code":"var _jsxFileName = \"/home/abhilash/Workspace/Training/Redux/Crud_json/crudjson/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PostList from './PostList';\nimport PostCreate from './PostCreate';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Router, Route } from 'react-router-dom';\nimport { resetSuccessMessage } from '../actions';\nimport history from '../history';\nimport PostEdit from './PostEdit';\nimport { GoogleLogin } from 'react-google-login';\nimport { gapi } from 'gapi-script';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst toastConfig = {\n  position: 'top-center',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'dark'\n};\nconst App = _ref => {\n  _s();\n  let {\n    resetSuccessMessage,\n    posts\n  } = _ref;\n  const clientId = '260034014064-t9k3lhrlke6ocfvt1d69r6nddktpqk34.apps.googleusercontent.com';\n  useEffect(() => {\n    const initClient = () => {\n      gapi.client.init({\n        clientId: clientId,\n        scope: ''\n      });\n    };\n    gapi.load('client:auth2', initClient);\n  });\n  const onSuccess = res => {\n    console.log('success:', res);\n  };\n  const onFailure = err => {\n    console.log('failed:', err);\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: clientId,\n    buttonText: \"Sign in with Google\",\n    onSuccess: onSuccess,\n    onFailure: onFailure,\n    cookiePolicy: 'single_host_origin',\n    isSignedIn: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 2\n  }, this);\n  useEffect(() => {\n    if (posts.successMessage) {\n      toast.success(posts.successMessage, toastConfig);\n      resetSuccessMessage();\n    }\n  }, [posts.successMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      history: history,\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/add\",\n        component: PostCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: PostList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/edit/:id\",\n        component: PostEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = App;\nconst mapStateToProps = state => {\n  // console.lo\n  return {\n    posts: state.posts\n  };\n};\nexport default connect(mapStateToProps, {\n  resetSuccessMessage\n})(App);\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","connect","PostList","PostCreate","ToastContainer","toast","Router","Route","resetSuccessMessage","history","PostEdit","GoogleLogin","gapi","toastConfig","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","App","posts","clientId","initClient","client","init","scope","load","onSuccess","res","console","log","onFailure","err","successMessage","success","mapStateToProps","state"],"sources":["/home/abhilash/Workspace/Training/Redux/Crud_json/crudjson/src/components/App.js"],"sourcesContent":["import React,{useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PostList from './PostList';\r\nimport PostCreate from './PostCreate';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Router, Route} from 'react-router-dom';\r\nimport { resetSuccessMessage } from '../actions';\r\nimport history from '../history';\r\nimport PostEdit from './PostEdit';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { gapi } from 'gapi-script';\r\n\r\nconst toastConfig = {\r\n  position: 'top-center',\r\n  autoClose: 2000,\r\n  hideProgressBar: false,\r\n  closeOnClick: true,\r\n  pauseOnHover: true,\r\n  draggable: true,\r\n  progress: undefined,\r\n  theme: 'dark',\r\n};\r\n\r\nconst App = ({resetSuccessMessage, posts}) => {\r\n\r\n\r\n const clientId = '260034014064-t9k3lhrlke6ocfvt1d69r6nddktpqk34.apps.googleusercontent.com';\r\n\r\n useEffect(() => {\r\n  const initClient = () => {\r\n        gapi.client.init({\r\n        clientId: clientId,\r\n        scope: ''\r\n      });\r\n   };\r\n   gapi.load('client:auth2', initClient);\r\n});\r\n\r\nconst onSuccess = (res) => {\r\n  console.log('success:', res);\r\n};\r\nconst onFailure = (err) => {\r\n  console.log('failed:', err);\r\n};\r\nreturn (\r\n <GoogleLogin\r\n    clientId={clientId}\r\n    buttonText=\"Sign in with Google\"\r\n    onSuccess={onSuccess}\r\n    onFailure={onFailure}\r\n    cookiePolicy={'single_host_origin'}\r\n    isSignedIn={true}\r\n/>\r\n);\r\n\r\n\r\n  useEffect(() => {\r\n    if (posts.successMessage) {\r\n      toast.success(posts.successMessage, toastConfig);\r\n      resetSuccessMessage();\r\n    }\r\n  }, [posts.successMessage]);\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <Router history={history}>\r\n        <Route path=\"/add\" component={PostCreate} />\r\n        <Route path=\"/\" exact  component={PostList} />\r\n        <Route path=\"/edit/:id\"   component={PostEdit} />\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  // console.lo\r\n  return { posts: state.posts };\r\n};\r\nexport default connect(mapStateToProps, { resetSuccessMessage })(App);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}