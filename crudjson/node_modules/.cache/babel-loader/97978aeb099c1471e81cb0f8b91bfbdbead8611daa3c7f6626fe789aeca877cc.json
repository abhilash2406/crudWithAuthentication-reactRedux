{"ast":null,"code":"import PostService from '../service';\nimport history from '../history';\nexport const authpage = (userid, key) => {\n  dispatch({\n    type: 'SET_SINGED_IN',\n    payload: payload\n  });\n};\nexport const setPosts = () => async dispatch => {\n  dispatch(loadingPosts(true));\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.listPosts();\n  dispatch({\n    type: 'SET_POSTS',\n    payload: data\n  });\n  dispatch(loadingPosts(false));\n};\nexport const loadingPosts = payload => {\n  return {\n    type: 'SET_LOADING_DATA',\n    payload: payload\n  };\n};\nexport const addPostLoading = payload => {\n  return {\n    type: 'SET_LOADING_ADD_POST',\n    payload: payload\n  };\n};\nexport const showForm = payload => {\n  return {\n    type: 'SET_FORM',\n    payload\n  };\n};\nexport const cancelForm = () => dispatch => {\n  dispatch(showForm(false));\n  dispatch({\n    type: 'SET_EDIT_POST_ID',\n    payload: null\n  });\n  dispatch({\n    type: 'SET_SELECTED_POST_DETAILS',\n    payload: null\n  });\n  history.push('/');\n};\nexport const addPost = payload => async dispatch => {\n  dispatch(addPostLoading(true));\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.createPost(payload);\n  dispatch(addPostLoading(false));\n  history.push('/list');\n  dispatch(showForm(false));\n  dispatch(setSuccessMessage('ADD SUCCESSFULLY'));\n  dispatch(setPosts());\n};\nexport const editPost = (id, payload) => async dispatch => {\n  dispatch(addPostLoading(true));\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.updatePost(id, payload);\n  dispatch(addPostLoading(false));\n  dispatch(cancelForm());\n  dispatch(setSuccessMessage('SUCCESSFULLY EDITED'));\n  dispatch(setPosts());\n  history.push('/');\n};\nexport const setSuccessMessage = payload => ({\n  type: 'SET_SUCCESS_MESSAGE',\n  payload\n});\nexport const resetSuccessMessage = () => ({\n  type: 'SET_SUCCESS_MESSAGE',\n  payload: null\n});\nexport const deletePost = id => async dispatch => {\n  dispatch({\n    type: 'SET_LOADING_DELETE_POST',\n    payload: true\n  });\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.deletePost(id);\n  dispatch({\n    type: 'SET_LOADING_DELETE_POST',\n    payload: false\n  });\n  dispatch(cancelForm());\n  dispatch(setSuccessMessage('DELETED SUCCESSFULLY'));\n  dispatch(setPosts());\n};\nexport const getPost = id => async dispatch => {\n  dispatch({\n    type: 'SET_LOADING_EDIT_POST',\n    payload: true\n  });\n  dispatch({\n    type: 'SET_EDIT_POST_ID',\n    payload: id\n  });\n  await new Promise(res => setTimeout(res, 1000));\n  const {\n    data\n  } = await PostService.getPost(id);\n  dispatch({\n    type: 'SET_SELECTED_POST_DETAILS',\n    payload: data\n  });\n  dispatch({\n    type: 'SET_LOADING_EDIT_POST',\n    payload: false\n  });\n\n  // dispatch(addPostLoading(false));\n  dispatch(showForm(true));\n  dispatch(setPosts());\n};","map":{"version":3,"names":["PostService","history","authpage","userid","key","dispatch","type","payload","setPosts","loadingPosts","Promise","res","setTimeout","data","listPosts","addPostLoading","showForm","cancelForm","push","addPost","createPost","setSuccessMessage","editPost","id","updatePost","resetSuccessMessage","deletePost","getPost"],"sources":["/home/abhilash/Workspace/Training/Redux/Crud_json/crudjson/src/actions/index.js"],"sourcesContent":["import PostService from '../service';\r\nimport history from '../history';\r\n\r\n\r\nexport const authpage=(userid, key , )=>{\r\n  dispatch({\r\n    type: 'SET_SINGED_IN',\r\n    payload: payload,\r\n  });\r\n\r\n}\r\n\r\nexport const setPosts = () => async (dispatch) => {\r\n  dispatch(loadingPosts(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.listPosts();\r\n  dispatch({\r\n    type: 'SET_POSTS',\r\n    payload: data,\r\n  });\r\n\r\n  dispatch(loadingPosts(false));\r\n};\r\n\r\nexport const loadingPosts = (payload) => {\r\n  return {\r\n    type: 'SET_LOADING_DATA',\r\n    payload: payload,\r\n  };\r\n};\r\nexport const addPostLoading = (payload) => {\r\n  return {\r\n    type: 'SET_LOADING_ADD_POST',\r\n    payload: payload,\r\n  };\r\n};\r\nexport const showForm = (payload) => {\r\n  return {\r\n    type: 'SET_FORM',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const cancelForm = () => (dispatch) => {\r\n  dispatch(showForm(false));\r\n  dispatch({\r\n    type: 'SET_EDIT_POST_ID',\r\n    payload: null,\r\n  });\r\n  dispatch({\r\n    type: 'SET_SELECTED_POST_DETAILS',\r\n    payload: null,\r\n  });\r\n  history.push('/');\r\n};\r\n\r\nexport const addPost = (payload) => async (dispatch) => {\r\n  dispatch(addPostLoading(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.createPost(payload);\r\n\r\n  dispatch(addPostLoading(false));\r\n  history.push('/list');\r\n  dispatch(showForm(false));\r\n  dispatch(setSuccessMessage('ADD SUCCESSFULLY'))\r\n  dispatch(setPosts());\r\n};\r\n\r\nexport const editPost = (id, payload) => async (dispatch) => {\r\n  dispatch(addPostLoading(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.updatePost(id, payload);\r\n\r\n  dispatch(addPostLoading(false));\r\n  dispatch(cancelForm());\r\n  dispatch(setSuccessMessage('SUCCESSFULLY EDITED'))\r\n  dispatch(setPosts());\r\n  history.push('/');\r\n};\r\n\r\nexport const setSuccessMessage =(payload)=> ({\r\n  type: 'SET_SUCCESS_MESSAGE',\r\n  payload,\r\n});\r\nexport const resetSuccessMessage =()=> ({\r\n  type: 'SET_SUCCESS_MESSAGE',\r\n  payload : null,\r\n});\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  dispatch({\r\n    type: 'SET_LOADING_DELETE_POST',\r\n    payload: true,\r\n  });\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.deletePost(id);\r\n  dispatch({\r\n    type: 'SET_LOADING_DELETE_POST',\r\n    payload: false,\r\n  });\r\n  dispatch(cancelForm());\r\n  dispatch(setSuccessMessage('DELETED SUCCESSFULLY'))\r\n  dispatch(setPosts());\r\n};\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n  dispatch({\r\n    type: 'SET_LOADING_EDIT_POST',\r\n    payload: true,\r\n  });\r\n  dispatch({\r\n    type: 'SET_EDIT_POST_ID',\r\n    payload: id,\r\n  });\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.getPost(id);\r\n  dispatch({\r\n    type: 'SET_SELECTED_POST_DETAILS',\r\n    payload: data,\r\n  });\r\n  dispatch({\r\n    type: 'SET_LOADING_EDIT_POST',\r\n    payload: false,\r\n  });\r\n\r\n  // dispatch(addPostLoading(false));\r\n  dispatch(showForm(true));\r\n  dispatch(setPosts());\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}